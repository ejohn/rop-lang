{
    "mov_eax_[eax+0x40]": "mov eax [ eax + 0x40 ]", 
    "pop_ecx_ebx": "pop ecx  pop ebx", 
    "pop_esp": "pop esp", 
    "and_[esi]_eax": "and [ esi ] eax  or cl [ esi ]  adc al 0x43", 
    "pop_esi": "pop esi", 
    "rol_[ebx+0x17383f8]_cl": "rol dword [ ebx + 0x17383f8 ] cl", 
    "dec_eax": "dec eax", 
    "xchg_ebx_ecx": "xchg ebx ecx", 
    "and_eax_edx": "and eax edx", 
    "neg_eax": "neg eax", 
    "nop": "nop", 
    "pop_eax": "pop eax", 
    "inc_ebx": "inc ebx", 
    "mov_eax_ecx": "mov eax ecx", 
    "xchg_ecx_eax": "xchg ecx eax  mov eax 0x5b000000", 
    "xor_eax_eax": "xor eax eax", 
    "ror_eax_0x8": "ror eax 0x8", 
    "xor_[eax+0x5f5e14c4]_al": "xor [ ebx + 0x5f5e14c4 ] al", 
    "add_eax_[edx]": "add eax [ edx ]  inc eax", 
    "add_esp_0x10": "add esp 0x10", 
    "adc_bl_ch": "adc bl ch", 
    "or_[ebx+0x40e4f02]_al": "or [ ebx + 0x40e4f02 ] al", 
    "add_esp_[esi+ecx+0x8]": "add esp [ esi + ecx + 0x8 ]", 
    "sub_eax_edx": "sub eax edx", 
    "xchg_edx_eax": "xchg edx eax", 
    "pop_ecx_eax": "pop ecx  pop eax", 
    "pop_edi": "pop edi", 
    "leave": "leave", 
    "pop_edx": "pop edx", 
    "pop_ebx": "pop ebx", 
    "mov_[edx+0x18]_eax": "mov [ edx + 0x18 ] eax", 
    "call_gs_[0x10]": "call gs:[ 0x10 ]", 
    "add_eax_edx": "add eax edx",
    "pop_ebp": "pop ebp"
}